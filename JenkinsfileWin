import java.text.SimpleDateFormat

def defDateFormat = new SimpleDateFormat("yyyyMMddHHmm")
def defDate = new Date()
def defTimestamp = defDateFormat.format(defDate).toString()

pipeline {

    agent any
    
    tools {
        maven 'M3'
        jdk 'jdk8.221'
    }
    
    stages {
    
        stage ('Build') {
            steps {
            	//bat ("mvn clean install")
                bat ("mvn clean verify")
            }
        }
                
        stage ('Ejecutar Pruebas') {
        	steps {
        		script {
        			try {
        				//sh ("mvn verify package -P Rimac")
        				//bat ("mvn test -Dcucumber.options=\"src/test/resources/features/ --tags \'${ESCENARIO}\' --glue rimac\"")
        				bat ("mvn test -Dcucumber.options=\"src/test/resources/features/ --tags \'${ESCENARIO}\' --plugin=json:${WORKSPACE}/target/site/serenity/result.json --glue rimac\"")
        				bat ("mvn serenity:aggregate")
        				echo 'Ejecucion de pruebas sin errores...'
        			}
        			catch (ex) {
        				echo 'Finalizo ejecucion con fallos...'
        				error ('Failed')
                    }
                }
            }
        }
        
        stage ('Reporte') {
        	steps {
        		script {
                     try {
                    	//bat ("echo ${WORKSPACE}")
                    	bat ("echo ${defTimestamp}")
                    	publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: "${WORKSPACE}/target/site/serenity", reportFiles: 'index.html', reportName: 'Evidencias de Prueba', reportTitles: 'Reporte de Pruebas'])
                    	//publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: "${WORKSPACE}/target/site/serenity${defTimestamp}", reportFiles: 'index.html', reportName: 'Evidencias de Prueba', reportTitles: ''])
                    	//publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: "${WORKSPACE}\\target\\site\\serenity${defTimestamp}", reportFiles: 'index.html', reportName: 'Evidencias de Prueba', reportTitles: ''])
                        echo 'Reporte realizado con exito'
                    }

                    catch (ex) {
                        echo 'Reporte realizado con Fallos'
                        error ('Failed')
                    }
                }
            }
        }
        
	    stage('Upload Result to QTM'){
	    	steps {
				step([$class: 'QTMReportPublisher', disableaction:false, qtmUrl: 'https://testmanagement.qmetry.com/', automationFramework: 'CUCUMBER', automationHierarchy: '2', testResultFilePath: '/target/site/serenity', qtmAutomationApiKey: 'EumgSTbeqx3sA3eGCjlWb8BJ8gmGykQqf5yZxaqB', project : '5658', release: 'Primer Release', cycle: 'Ciclo 1', buildName: 'testBuild1', platformName: 'No Platform', testSName: 'Testsuite_summary', proxyUrl:'', testSuiteName: '',   
				testcaseFields: '{"description":"Automated Test case", "testCaseType":"Automated", "testCaseState":"Open", "component":["Not Available"], "priority":"Blocker", "testcaseOwner":"Christian.Maury", "estimatedTime":"143", "userDefinedFields" : {"Custom_Filed_Name" : "Custom Testcase Value"}}',
				testsuiteFields: '{"description":"Automated Test suite", "testsuiteOwner": "Christian.Maury", "testSuiteState": "New", "userDefinedFields": {"Integrate" : "Custom Field Testsuite"}}', skipWarning: '0']) 
	    	}
	    }
        
    }
}
